Curso PostGreSQL Completo
Instrutor: Sandro Servino
https://www.linkedin.com/in/sandroservino/?originalSubdomain=pt

-------------------------------------------------------------------------------------------------------------------------------------

No PostgreSQL 17, a estrutura de diret√≥rios dentro do diret√≥rio data 
segue um padr√£o semelhante ao das vers√µes anteriores, mas pode ter 
algumas mudan√ßas sutis dependendo das configura√ß√µes e do sistema 
operacional. O diret√≥rio data √© o local onde o PostgreSQL armazena seus 
arquivos de configura√ß√£o, logs, e, principalmente, os dados do banco.

Vamos dar uma olhada no diretorio DATA:

C:\Program Files\PostgreSQL\17\data

Estrutura de Diret√≥rios do PostgreSQL 17 (data)

base/

Cont√©m os diret√≥rios e arquivos dos bancos de dados individuais.
Cada banco de dados tem um diret√≥rio pr√≥prio, cujo nome √© o OID do banco.
Dentro de cada diret√≥rio de banco, os arquivos de tabelas e √≠ndices 
s√£o armazenados.

Oque √© OID no PostgreSQL?
OID (Object Identifier) √© um identificador num√©rico √∫nico atribu√≠do 
a objetos do banco de dados, como tabelas, bancos de dados e outras 
entidades. No caso dos bancos de dados, cada um recebe um OID √∫nico 
no momento da cria√ß√£o.

Como descobrir o OID do banco de dados?
Para saber qual desses diret√≥rios pertence ao seu banco de dados 
chamado bancox, execute este comando no psql:

SELECT oid, datname FROM pg_database WHERE datname = 'bancox';
SELECT oid, datname FROM pg_database;

** DICA:

Os bancos de dados template0 e template1 s√£o bancos especiais 
no PostgreSQL usados como modelos para a cria√ß√£o de novos 
bancos de dados. Eles n√£o aparecem no pgAdmin por padr√£o porque 
s√£o bancos do sistema e n√£o devem ser alterados diretamente.

üìå O que √© o template1?
O template1 √© o modelo padr√£o para a cria√ß√£o de novos bancos de dados.

Quando voc√™ executa:
CREATE DATABASE meu_banco;

O PostgreSQL copia todos os objetos do template1 para o novo banco.
Voc√™ pode modificar o template1 (por exemplo, adicionando extens√µes), 
e essas mudan√ßas ser√£o replicadas em novos bancos criados a partir dele.

exemplo:
\c template1
CREATE EXTENSION IF NOT EXISTS nome_da_extensao;

Vamos ver isto no futuro.

üìå O que √© o template0?
O template0 √© um modelo imut√°vel, usado quando voc√™ precisa criar 
um banco de dados "limpo", sem customiza√ß√µes.
Ele n√£o pode ser modificado e √© usado para restaurar o estado original 
de um banco. Se precisar criar um banco sem customiza√ß√µes do template1, 
use:

CREATE DATABASE meu_banco TEMPLATE template0;

--

global/

o diret√≥rio global/ armazena informa√ß√µes globais que s√£o compartilhadas 
entre todos os bancos de dados da instancia ou do cluster Postgres.

Principais Arquivos no Diret√≥rio global/

pg_filenode.map:
Fun√ß√£o: Este arquivo mapeia os identificadores internos (filenodes)
para os arquivos f√≠sicos que armazenam as tabelas e √≠ndices no sistema 
de arquivos.

pg_internal.init:
Fun√ß√£o: Utilizado para inicializar a estrutura interna do banco de dados, 
configurando aspectos essenciais para o funcionamento do Postgres.

pg_control:
Fun√ß√£o: Cont√©m informa√ß√µes cr√≠ticas sobre o estado do banco de dados, 
como a vers√£o do PostgreSQL, o n√∫mero do √∫ltimo checkpoint e detalhes 
sobre os arquivos WAL (Write-Ahead Logging). 
Este arquivo √© fundamental para a recupera√ß√£o do banco de dados ap√≥s 
falhas.

config_exec_params:
Fun√ß√£o: Armazena par√¢metros de configura√ß√£o utilizados pelo PostgreSQL 
durante a execu√ß√£o, influenciando o comportamento do sistema em tempo 
de opera√ß√£o.

Esses arquivos s√£o essenciais para a opera√ß√£o interna do PostgreSQL 
e devem ser manipulados com cautela. Altera√ß√µes inadequadas podem 
comprometer a integridade e a estabilidade do banco de dados.

--

pg_wal/

O diret√≥rio pg_wal/ no PostgreSQL armazena os arquivos de 
Write-Ahead Logging (WAL), que registram todas as operacoes de mudan√ßas no 
banco de dados antes de serem aplicadas no arquivo final de dados. 
Esses arquivos s√£o fundamentais para:

- Recupera√ß√£o de falhas (permite restaurar o banco em caso de crash).
- Replica√ß√£o (sincroniza√ß√£o entre servidores prim√°rio e r√©plica).
- Point-in-Time Recovery (PITR) (recupera√ß√£o at√© um ponto espec√≠fico no tempo).
- O PostgreSQL mant√©m esses arquivos at√© que sejam arquivados ou 
  n√£o sejam mais necess√°rios.

Antes do PostgreSQL 10, esse diret√≥rio era chamado de pg_xlog/.

WAL TEM TUDO A VER EM BANCO DE DADOS RELACIONAL COM O CONCEITO ACID:

O conceito ACID no PostgreSQL (e em bancos de dados transacionais em geral)
se refere a quatro propriedades fundamentais para garantir a 
integridade dos dados:

. Atomicidade (A - Atomicity): Uma transa√ß√£o deve ser tudo ou nada. 
Se qualquer parte falhar, todas as altera√ß√µes s√£o revertidas.

. Consist√™ncia (C - Consistency): O banco deve sempre permanecer 
em um estado v√°lido antes e depois da transa√ß√£o.

. Isolamento (I - Isolation): Transa√ß√µes concorrentes n√£o devem interferir 
umas nas outras de maneira indesejada, por exemplo, dois processos
nao podem alterar o mesmo dado no mesmo momento, e o banco de dados
protege atraves de locks, que iremos ver no futuro.

. Durabilidade (D - Durability): Ap√≥s um commit, os dados devem ser 
gravados permanentemente, mesmo em caso de falha do sistema.

Como o WAL garante ACID?
O Write-Ahead Logging (WAL) desempenha um papel crucial para garantir ACID,
como por exemplo:

O PostgreSQL escreve todas as altera√ß√µes nos files do WAL log antes de 
aplic√°-las nos files de dados do banco de dados. Isso significa que, 
mesmo que ocorra uma falha antes de os dados serem gravados nos arquivos
de dados no disco, as mudan√ßas podem ser recuperadas ao reiniciar o Postgres,
atrav√©s da leitura das transacoes completadas que foram registradas 
nos files do WAL Log no disco.

Se uma transa√ß√£o falha no meio do processo, as opera√ß√µes registradas 
no WAL Log sem o commit podem ser desfeitas, garantindo que nenhuma 
mudan√ßa parcial permane√ßa. 

No caso de um crash, o PostgreSQL quando reinicializa l√™ os 
registros do WAL log e reexecuta as transacoes comitadas mas que 
nao tinham sido ainda garantidos nos files de dados no disco ou desfaz 
transa√ß√µes incompletas para restaurar o banco a um estado consistente.

Dessa forma, o WAL log n√£o s√≥ melhora a seguran√ßa e confiabilidade do 
PostgreSQL, como tamb√©m viabiliza a replica√ß√£o e o Point-in-Time 
Recovery (PITR), mas vamos vamos muito sobre isto ainda.

--

pg_commit_ts/

Cont√©m timestamps de commits, se o recurso estiver habilitado.
Esse recurso continua sendo opcional e depende da configura√ß√£o 
track_commit_timestamp, mas vamos falar sobre configuracoes de
parametros de start depois.

Para que isso √© usado?
- Replica√ß√£o l√≥gica: Ajuda a resolver conflitos em replica√ß√µes 
  multi-master.
- Monitoramento e auditoria: Permite verificar a ordem dos commits 
  e quando uma transa√ß√£o foi finalizada.

Se track_commit_timestamp estiver desligado (valor padr√£o), o diret√≥rio 
pg_commit_ts/ fica vazio.

Se voc√™ deseja habilitar esse recurso, pode configurar o par√¢metro 
track_commit_timestamp no arquivo de configura√ß√£o postgresql.conf:

track_commit_timestamp = on

--

pg_logical/

O diret√≥rio pg_logical/ no PostgreSQL armazena informa√ß√µes relacionadas
 √† replica√ß√£o l√≥gica. Esse recurso permite replica√ß√£o de dados entre 
diferentes inst√¢ncias do PostgreSQL, capturando as mudan√ßas de dados 
(inser√ß√µes, atualiza√ß√µes, exclus√µes) em tempo real. 
A replica√ß√£o l√≥gica √© usada em cen√°rios como replica√ß√£o seletiva de 
tabelas ou replica√ß√£o entre diferentes vers√µes de PostgreSQL, 
e √© comumente utilizada para distribui√ß√£o de dados ou migra√ß√£o de dados.

--

pg_notify/

Armazena dados sobre notifica√ß√µes ass√≠ncronas (LISTEN/NOTIFY).

O PostgreSQL permite que processos do banco de dados enviem e recebam 
notifica√ß√µes sem precisar verificar constantemente 
as tabelas (evitando polling).

o mecanismo LISTEN/NOTIFY do PostgreSQL tem algumas semelhan√ßas 
com o Service Broker do SQL Server(servico de mensageria), 
como por exemplo:
‚úÖ Comunica√ß√£o ass√≠ncrona: Ambos permitem que processos do banco se 
comuniquem sem precisar consultar tabelas constantemente.
‚úÖ Eventos internos no banco: Podem ser usados para notificar processos 
sobre mudan√ßas ou eventos importantes.
‚úÖ Desempenho melhor que polling: Eliminam a necessidade de consultas 
frequentes para detectar altera√ß√µes.
‚úÖ Pode ser usado como parte de um sistema de cache para conex√µes 
de usu√°rios.

--

pg_replslot/

O diret√≥rio pg_replslot/ armazena informa√ß√µes relacionadas 
√† replica√ß√£o no PostgreSQL, tanto para replica√ß√£o f√≠sica quanto l√≥gica.

Objetivo:
Guardar registros de mudan√ßas no banco: Ele garante que os registros 
de altera√ß√µes feitos no banco de dados sejam mantidos dispon√≠veis 
at√© que sejam consumidos por outro sistema ou servidor.

Sincroniza√ß√£o entre servidores: Esse diret√≥rio √© utilizado para 
sincronizar dados entre servidores, impedindo que registros importantes 
sejam apagados antes de serem replicados.

Controle de dados replicados: Ele facilita o processo de replica√ß√£o, 
ajudando a controlar quais dados foram lidos e replicados para outras 
inst√¢ncias do banco.

Em resumo, a fun√ß√£o desse diret√≥rio √© gerenciar a replica√ß√£o de dados 
para garantir que as informa√ß√µes sejam transmitidas corretamente 
e de maneira eficiente entre servidores.

Mas porque tenho um outro diretorio para replicacao logica?

O PostgreSQL oferece dois tipos de replica√ß√£o: f√≠sica e l√≥gica. 
Embora ambos envolvam a replica√ß√£o de dados, a replica√ß√£o l√≥gica, 
especialmente com a extens√£o pg_logical, tem um controle mais detalhado 
e flex√≠vel sobre quais dados ser√£o replicados, podendo por exemplo
replicar apenas um determinado banco de dados ou mesmo tabela de 
um banco de dados, enquanto a replicacao fisica, replica de forma
binaria todos os arquivos da instancia postgres e nao permite
selecionar objetos especificos.

pg_logical/ √© dedicado a armazenar informa√ß√µes especificas 
sobre a replica√ß√£o l√≥gica 
enquanto pg_replslot/ gerencia a replica√ß√£o de forma mais geral 
(incluindo a replica√ß√£o f√≠sica).

--

pg_serial/

Cont√©m informa√ß√µes sobre transa√ß√µes serializ√°veis.

O que s√£o transa√ß√µes serializ√°veis?
No PostgreSQL ou em qualquer banco de dados relacional s√©rio que 
siga o padrao SQL ANSI/ISO de nivel de isolamento, o n√≠vel de isolamento 
serializ√°vel √© o mais alto de todos os n√≠veis de isolamento de transa√ß√µes. 
Ele garante que as transa√ß√µes sejam executadas de forma que o resultado 
final seja o mesmo se as transa√ß√µes fossem realizadas de forma 
sequencial (uma ap√≥s a outra), sem interfer√™ncia entre elas, 
mesmo que estejam sendo executadas de forma concorrente.

Quando v√°rias transa√ß√µes est√£o ocorrendo simultaneamente, o PostgreSQL 
precisa garantir que n√£o haja anomalias como leituras sujas, 
leituras fantasmas ou grava√ß√µes perdidas. No n√≠vel serializ√°vel, 
ele faz isso verificando e evitando condi√ß√µes onde o resultado de 
transa√ß√µes concorrentes poderia ser inconsistente.

Os quatro n√≠veis de isolamento de transa√ß√µes estabelecidos 
pela ISO (International Organization for Standardization) s√£o:

1. Read Uncommitted (Leitura n√£o confirmada)
Descri√ß√£o: Permite que uma transa√ß√£o leia dados que ainda n√£o foram 
confirmados por outras transa√ß√µes (tamb√©m conhecidos como "dirty reads").
Problema: Pode resultar em leituras imprecisas, pois as transa√ß√µes 
podem ler dados que depois podem ser desfeitos com um rollback.

2. Read Committed (Leitura confirmada)
Descri√ß√£o: Garante que uma transa√ß√£o leia apenas dados que foram 
confirmados (committed) por outras transa√ß√µes.
Problema: Pode ocorrer o fen√¥meno de non-repeatable reads, onde, 
se voc√™ ler um valor em uma transa√ß√£o e depois tentar ler o mesmo 
valor novamente, ele pode ter mudado devido a uma outra 
transa√ß√£o confirmada.

3. Repeatable Read (Leitura repet√≠vel)
Descri√ß√£o: Garante que, durante toda a transa√ß√£o, os dados lidos n√£o 
ser√£o alterados por outras transa√ß√µes, evitando o problema de 
non-repeatable reads.
Problema: Pode ocorrer phantom reads (leituras fantasmas), 
onde novas linhas podem ser inseridas por outras transa√ß√µes que afetam 
o resultado da sua consulta.

4. Serializable (Serializ√°vel)
Descri√ß√£o: √â o n√≠vel de isolamento mais alto. Ele garante que o 
comportamento da transa√ß√£o ser√° equivalente a se as transa√ß√µes fossem 
executadas sequencialmente, uma ap√≥s a outra, sem sobreposi√ß√£o.

Garantia: Evita todos os tipos de anomalias, incluindo dirty reads, 
non-repeatable reads e phantom reads. Por√©m, pode causar grandes 
bloqueios e diminuir muito a concorr√™ncia e trazer grandes problemas
de performance para o seu ambiente.

Padr√£o do PostgreSQL 17
O n√≠vel de isolamento padr√£o no PostgreSQL 17 √© o Read Committed.

Isso significa que, por padr√£o, o PostgreSQL garantir√° que as transa√ß√µes 
s√≥ possam ler dados confirmados por outras transa√ß√µes. 
Por√©m, ele permite que os dados lidos possam ser alterados por outras 
transa√ß√µes enquanto a transa√ß√£o corrente est√° em andamento, 
o que pode resultar em non-repeatable reads.

Se voc√™ quiser usar um n√≠vel de isolamento mais restrito, 
como Repeatable Read ou Serializable, pode configurar 
isso explicitamente na transa√ß√£o com o comando 
SET TRANSACTION ISOLATION LEVEL, dentro de uma stored procedure
por exemplo que seja critica para o sistema, mas vamos conversar mais
para frente.

--

pg_snapshots/

O diret√≥rio pg_snapshots/ no PostgreSQL armazena snapshots de transa√ß√µes, 
especialmente √∫teis para o n√≠vel de isolamento Repeatable Read e
read commited.

Um snapshot √© uma vis√£o consistente do banco de dados em um determinado 
ponto no tempo. Quando uma transa√ß√£o come√ßa, o PostgreSQL tira um 
snapshot para garantir que ela veja os mesmos dados at√© seu t√©rmino, 
mesmo que outras transa√ß√µes fa√ßam altera√ß√µes.

OBS: O PostgreSQL, assim como o MySQL (InnoDB) e o Oracle, 
usa MVCC (Multiversion Concurrency Control), permitindo que SELECT 
n√£o bloqueie UPDATE/DELETE e vice-versa. Isso melhora a concorr√™ncia e
evita bloqueios desnecess√°rios.

J√° no SQL Server, o comportamento padr√£o √© pessimista, onde SELECT 
pode bloquear UPDATE/DELETE e vice-versa. No entanto, esse comportamento 
pode ser alterado ativando o par√¢metro READ_COMMITTED_SNAPSHOT de um 
determinado banco de dados, o que faz o SQL Server adotar um mecanismo 
similar ao MVCC.

--

pg_stat/

Armazena estat√≠sticas detalhadas sobre a atividade da instancia Postgres
e dos bancos de dados hospedados nesta instancia, 
coletadas pelo sistema de monitoramento interno do PostgreSQL.

As estat√≠sticas s√£o informa√ß√µes coletadas pelo PostgreSQL sobre o uso 
do banco de dados, como:

. Leituras e grava√ß√µes de dados.
. Opera√ß√µes de consulta (SELECT, INSERT, UPDATE, DELETE).
. Uso de √≠ndices.
. Bloqueios de tabelas e registros.
. Desempenho das transa√ß√µes.

Essas estat√≠sticas ajudam os administradores de banco de dados (DBAs) 
a entender como o banco de dados est√° sendo usado e onde h√° potenciais 
problemas de desempenho.

--

pg_stat_tmp/

Armazena estat√≠sticas tempor√°rias em execu√ß√£o.

Essas estat√≠sticas s√£o dados vol√°teis, ou seja, elas n√£o s√£o persistentes 
e s√£o apenas tempor√°rias. O conte√∫do √© recriado ao reiniciar o PostgreSQL.

Ele cont√©m arquivos tempor√°rios usados pelo coletor de estat√≠sticas 
do PostgreSQL. Essas estat√≠sticas incluem informa√ß√µes sobre:

1Ô∏è Uso de tabelas e √≠ndices
N√∫mero de p√°ginas lidas e escritas.
Quantidade de tuplas (linhas) inseridas, atualizadas e exclu√≠das.

2Ô∏è Atividade do Autovacuum
Quantidade de autoan√°lises (autovacuum analyze) realizadas.
Estat√≠sticas sobre auto-vacuums executados.

3Ô∏è Atividade do backend (sess√µes de usu√°rios)
Informa√ß√µes tempor√°rias sobre as conex√µes e atividades recentes.

4Ô∏è N√∫mero de commits e rollbacks
Contagem tempor√°ria de transa√ß√µes confirmadas e desfeitas antes 
de serem persistidas.

5Ô∏è Estat√≠sticas de E/S (I/O)
Quantidade de blocos de disco lidos e gravados.

As estat√≠sticas armazenadas nesse diret√≥rio s√£o √∫teis para que o 
PostgreSQL possa ajustar o desempenho de consultas em tempo real 
e tomar decis√µes r√°pidas sobre o uso de recursos (como mem√≥ria e CPU).

Diferen√ßa entre pg_stat/ e pg_stat_tmp/:

pg_stat/: Cont√©m estat√≠sticas mais permanentes e gerais sobre a atividade 
do Postgres.

pg_stat_tmp/ ‚Üí Armazena estat√≠sticas tempor√°rias, que s√£o descartadas 
ao reiniciar o PostgreSQL.

--

pg_subtrans/

O diret√≥rio pg_subtrans/ no PostgreSQL armazena informa√ß√µes sobre 
subtransa√ß√µes, que s√£o transa√ß√µes dentro de outras transa√ß√µes. 
As subtransa√ß√µes s√£o usadas para fornecer um controle mais granular 
sobre transa√ß√µes compostas, permitindo que o banco de dados trate 
falhas e revers√µes de maneira eficiente, sem precisar reverter a 
transa√ß√£o principal inteira.

O que s√£o subtransa√ß√µes?
Uma subtransa√ß√£o √© uma transa√ß√£o que ocorre dentro de uma transa√ß√£o 
principal. Elas permitem que certas partes de uma transa√ß√£o maior 
possam ser completadas ou revertidas independentemente, sem afetar 
toda a transa√ß√£o. Isso √© √∫til, por exemplo, quando se quer 
commit (confirmar) parte de uma transa√ß√£o, mas ainda manter a 
possibilidade de rollback (desfazer) outras partes.

--

pg_tblspc/

O diret√≥rio pg_tblspc/ no PostgreSQL armazena links simb√≥licos que 
apontam para os diret√≥rios f√≠sicos onde o PostgreSQL armazenar√° os 
arquivos dos tablespaces.

Um tablespace √© um container l√≥gico no PostgreSQL, que possui diret√≥rios 
f√≠sicos no disco onde os dados e objetos do banco de dados 
(como tabelas, √≠ndices, etc.) s√£o armazenados. Ele permite a distribui√ß√£o 
dos dados em diferentes dispositivos de armazenamento. 
Em outras palavras, um tablespace permite que o administrador do banco 
de dados defina onde os arquivos de dados do banco (como tabelas, 
√≠ndices e outros objetos) ser√£o fisicamente armazenados, separando-os 
de outros dados ou distribuindo-os por diferentes discos para melhorar 
o desempenho.

Quando um tablespace √© criado no PostgreSQL (usando o comando 
CREATE TABLESPACE), voc√™ especifica um caminho de diret√≥rio no sistema 
de arquivos onde o PostgreSQL deve armazenar os dados. 
O PostgreSQL, ent√£o, cria um link simb√≥lico dentro do diret√≥rio 
pg_tblspc/, apontando para esse diret√≥rio de dados f√≠sico.

--

pg_twophase/

Cont√©m informa√ß√µes sobre transa√ß√µes preparadas em um ambiente 
de two-phase commit(2PC).

O 2PC √© um processo geralmente utilizado em ambientes distribu√≠dos 
(como replica√ß√£o e clusters), onde v√°rias inst√¢ncias de banco de dados 
precisam garantir que uma transa√ß√£o seja completada de forma consistente 
em todos os lugares.

O diret√≥rio pg_twophase/ assegura que as transa√ß√µes possam ser 
completadas corretamente ou revertidas, mesmo ap√≥s falhas ou 
reinicializa√ß√µes do sistema.

--

pg_multixact/

O diret√≥rio pg_multixact/ no PostgreSQL armazena informa√ß√µes sobre 
m√∫ltiplos bloqueios de transa√ß√µes quando mais de uma transa√ß√£o 
precisa bloquear a mesma linha ao mesmo tempo.

No PostgreSQL, quando duas ou mais transa√ß√µes precisam compartilhar 
o bloqueio de uma mesma linha, o banco cria um MultiXact (
ou "transa√ß√£o m√∫ltipla").

Esse mecanismo permite que mais de uma transa√ß√£o seja "dona" 
de um bloqueio ao mesmo tempo.

Vamos conversar sobre locks no futuro.

--


log/ (se configurado para armazenar logs no diret√≥rio data, 
MAS √â DEFAULT DA INSTALACAO)

Cont√©m arquivos de log do PostgreSQL, se configurado para armazenar 
logs nesse local.

Sempre que tiver algum problema, como por exemplo o PostgreS nao
da start, verifica o ultimo arquivo de log, abra o conteudo
e procure os erros.

C:\Program Files\PostgreSQL\17\data\log

Por exemplo:
2025-03-16 08:18:16.738 GMT [13224] FATAL:  database "teste" does not exist

--

Arquivos importantes no diret√≥rio raiz (data/)

- postgresql.conf: Arquivo principal de configura√ß√£o do PostgreSQL, 
  que √© lido pelo servico Postgres quando do start, e por exemplo,
  aloca mais memoria ram do servidor para o Postgres.
- pg_hba.conf: Configura√ß√£o de autentica√ß√£o (m√©todos de conex√£o).
- pg_ident.conf: Mapeamento de identidades de usu√°rios.
- PG_VERSION: Arquivo que cont√©m a vers√£o do PostgreSQL usada no cluster.

VAMOS DETALHAR MAIS UM POUCO SOBRE ESTES FILES:

1. postgresql.conf ‚Äì Arquivo Principal de Configura√ß√£o do PostgreSQL

Este √© o principal arquivo de configura√ß√£o do PostgreSQL e controla 
diversos aspectos do funcionamento do Postgres. Ele define desde 
par√¢metros b√°sicos, como localiza√ß√£o dos logs, 
at√© otimiza√ß√µes de desempenho e comportamento da replica√ß√£o.

üìå Localiza√ß√£o:
/var/lib/postgresql/17/data/postgresql.conf (em distribui√ß√µes Linux)
C:\Program Files\PostgreSQL\17\data\postgresql.conf (em Windows)

üîß Principais configura√ß√µes:

Configura√ß√µes Gerais:

data_directory = '/var/lib/postgresql/17/data' 
‚Üí Define onde os dados do PostgreSQL est√£o armazenados.

hba_file = '/var/lib/postgresql/17/data/pg_hba.conf'
 ‚Üí Especifica o caminho do arquivo de autentica√ß√£o (pg_hba.conf).

ident_file = '/var/lib/postgresql/17/data/pg_ident.conf' 
‚Üí Define o caminho do arquivo de mapeamento de identidades 
  (pg_ident.conf).

Configura√ß√µes de Rede e Conex√£o:

listen_addresses = 'localhost' 
‚Üí Define em quais endere√ßos IP o PostgreSQL vai aceitar conexoes
(pode ser * para aceitar conex√µes de qualquer IP).

port = 5432 ‚Üí Define a porta de escuta do PostgreSQL.

max_connections = 100 ‚Üí N√∫mero m√°ximo de conex√µes simult√¢neas permitidas.

Configura√ß√µes de Mem√≥ria e Performance:

shared_buffers = 128MB 
‚Üí Quantidade de mem√≥ria compartilhada usada pelo PostgreSQL.

work_mem = 4MB ‚Üí Mem√≥ria usada para opera√ß√µes tempor√°rias como 
ordena√ß√µes e joins.

maintenance_work_mem = 64MB ‚Üí Mem√≥ria alocada para opera√ß√µes 
de manuten√ß√£o como VACUUM e CREATE INDEX.

Configura√ß√£o de Logs:

logging_collector = on 
‚Üí Ativa o coletor de logs.

log_directory = 'pg_log' 
‚Üí Diret√≥rio onde os logs ser√£o armazenados.

log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' 
‚Üí Nome do arquivo de log, incluindo data e hora.

Configura√ß√£o de Autovacuum:

autovacuum = on 
‚Üí Habilita a execu√ß√£o autom√°tica do processo de limpeza VACUUM.

autovacuum_vacuum_threshold = 50 
‚Üí N√∫mero de atualiza√ß√µes/deletes antes do VACUUM ser acionado.

Configura√ß√£o de Replica√ß√£o e Backup:

wal_level = replica 
‚Üí Define o n√≠vel de registro do Write-Ahead Logging (WAL).

max_wal_senders = 10 
‚Üí N√∫mero m√°ximo de conex√µes de replica√ß√£o permitidas.

archive_mode = on 
‚Üí Ativa o arquivamento de WAL para backups.

üìå Modifica√ß√£o:
Para alterar qualquer configura√ß√£o, edite o arquivo e reinicie 
o PostgreSQL.

Essa estrutura pode variar se houver configura√ß√µes personalizadas, 
como o uso de tablespaces externos 
ou configura√ß√£o diferente para armazenamento de logs e WALs.

--

2. pg_hba.conf ‚Äì Configura√ß√£o de Autentica√ß√£o (M√©todos de Conex√£o)

Esse arquivo define quais usu√°rios podem acessar o banco de dados, de 
quais endere√ßos IP e qual m√©todo de autentica√ß√£o ser√° utilizado.

üìå Localiza√ß√£o:

No windows:
C:\Program Files\PostgreSQL\17\data\pg_hba.conf

No linun:
/var/lib/postgresql/17/data/pg_hba.conf

üîí Formato das linhas:
Cada linha segue a estrutura:

# Tipo      Banco       Usu√°rio      Endere√ßo          M√©todo de Autentica√ß√£o
host        all         xpto         192.168.1.0/24    peer map=mymap 
 		
Tipo: local, host, hostssl, hostnossl
Banco: Nome do banco de dados (all significa todos)
Usu√°rio: Nome do usu√°rio (all significa qualquer usu√°rio)
Endere√ßo: Pode ser um IP ou um intervalo (exemplo: 192.168.1.100 
          ou 192.168.1.0/24)
M√©todo de Autentica√ß√£o:
  md5 ‚Üí Solicita senha criptografada.
  scram-sha-256 ‚Üí Autentica√ß√£o mais segura que md5.
  trust ‚Üí Permite acesso sem senha (n√£o recomendado).
  peer ‚Üí Permite autentica√ß√£o pelo nome do usu√°rio do SO.
  ident ‚Üí Similar ao peer, mas usa um servi√ßo externo.

OBS:
"local" is for Unix domain socket connections only

üìå Exemplo de configura√ß√£o, usando o user conectado no SO, desde
   que o mesmo tenha permissao de acessar banco de dados e os objetos
   no Postgres:

# Permite conex√µes locais sem senha para o usu√°rio postgres
local       all         postgres                          peer map=mymap

# Permite conex√µes de qualquer usu√°rio vindo de 192.168.1.0/24 
usando senha MD5
host    all             all             192.168.1.0/24        md5

# Permite conex√µes remotas apenas para o usu√°rio replicator 
via senha criptografada
host    replication     replicator      10.0.0.5/32           scram-sha-256

üìå Modifica√ß√£o:
Ap√≥s qualquer altera√ß√£o, √© necess√°rio recarregar as configura√ß√µes com:

pg_ctl reload

Ou:

systemctl reload postgresql

--

3. pg_ident.conf ‚Äì Mapeamento de Identidades de Usu√°rios

Esse arquivo permite mapear usu√°rios do sistema operacional para usu√°rios 
do PostgreSQL. 
Ele √© √∫til para autentica√ß√£o via peer ou ident.

üìå Localiza√ß√£o:

No windows:
C:\Program Files\PostgreSQL\17\data\pg_ident.conf

No linux:
/var/lib/postgresql/17/data/pg_ident.conf

üîÑ Formato das linhas:

# Put your actual configuration here
# ----------------------------------
# MAPNAME       SYSTEM-USERNAME         PG-USERNAME

exemplo:

# Nome do Mapeamento   Usu√°rio SO      Usu√°rio PostgreSQL
mymap                  sandro         xpto
mymap		       ricardo        xpto2

üìå Como funciona?

Se no pg_hba.conf estiver configurado assim:

local all all peer map=mymap

O PostgreSQL verificar√° pg_ident.conf e permitir√° que sandro 
(usu√°rio do sistema) se autentique 
como admin_pg (usu√°rio do PostgreSQL).

üìå Modifica√ß√£o:
Ap√≥s mudan√ßas, recarregar com:

pg_ctl reload

--

4. PG_VERSION ‚Äì Arquivo com a Vers√£o do PostgreSQL

Esse √© um arquivo simples que cont√©m apenas um n√∫mero 
representando a vers√£o do Postgres instalado.

üìå Localiza√ß√£o:

No Windows:
C:\Program Files\PostgreSQL\17\data\PG_VERSION

No Linux:
/var/lib/postgresql/17/data/PG_VERSION

üìå Conte√∫do:

Ele exibir√° algo como:

17

Isso significa que a vers√£o do Postgres √© a 17.

----------------------------------------------------------------------------------

---------- MUDANDO DE ASSUNTO

DESLIGANDO O SERVIDOR POSTGRESQL DE FORMA SEGURA

A forma mais segura de parar o servi√ßo PostgreSQL no Windows √© utilizando 
o Gerenciador de Servi√ßos ou os comandos apropriados no terminal. 
Aqui est√£o as op√ß√µes detalhadas:

1. Pelo Gerenciador de Servi√ßos
.Abra o Gerenciador de Servi√ßos:
Pressione Win + R, digite services.msc e pressione Enter.
Localize o servi√ßo PostgreSQL:
Procure por um servi√ßo chamado algo como PostgreSQL - vers√£o 
(por exemplo, PostgreSQL - 15).
Pare o servi√ßo:
Clique com o bot√£o direito no servi√ßo e selecione Parar.
Aguarde at√© que o status do servi√ßo mude para "Parado".

OBS: EVITE SIMPLESMENTE DAR UM SHUTDOWN NO WINDOWS SERVER OU PIOR A VM. 
ANTES PARE O POSTGRESQL E ASSIM
TERA GARANTIR QUE SEU BANCO DE DADOS ESTAR√Å INTEGRO. 
√â RARO DAR PROBLEMA NO BANCO MESMO COM PARADAS INESPERADAS 
DO WINDOWS OU DO SERVIDOR, MAS MELHOR PREVENIR DO QUE REMEDIAR.

2.Se quiser parar via comando do DOS
Va para o DOS como administrator, com o comando CMD.

OBS: SE FOR PARA O DOS SEM MODO ADMINSTRADOR NAO PODERA
PARAR DEVIDO FALTA DE PRIVILEGIO.

E VA PARA A PASTA ONDE INSTALOU O POSTGRESQL. NO MEU CASO:
CD C:\Program Files\PostgreSQL\17\bin

net stop postgresql-x64-17

PARA VER O STATUS DE UM SERVICO:
sc query postgresql-x64-17

Ou pelo services do windows.

O comando net stop postgresql-x64-17 envia um sinal de parada padr√£o 
ao servi√ßo do PostgreSQL.

Isso significa que:
‚úîÔ∏è O PostgreSQL aguarda todas as conex√µes ativas terminarem.
‚úîÔ∏è Nenhuma transa√ß√£o ativa √© interrompida abruptamente.
‚úîÔ∏è Pode demorar se houver conex√µes longas.

Aqui est√£o OUTROS tr√™s comandos para parar o PostgreSQL, com uma 
explica√ß√£o r√°pida:

1Ô∏è Parada segura (aguarda conex√µes finalizarem normalmente)

pg_ctl -D "C:\Program Files\PostgreSQL\17\data" stop -m smart

‚úîÔ∏è M√©todo mais seguro.
‚úîÔ∏è Espera as conex√µes terminarem antes de desligar.

2Ô∏è Parada r√°pida (finaliza conex√µes ativas imediatamente)

pg_ctl -D "C:\Program Files\PostgreSQL\17\data" stop -m fast

‚ö° Finaliza as conex√µes ativas rapidamente.
‚ö° Mais r√°pido, mas pode causar rollback de transa√ß√µes em andamento.

3Ô∏è Parada for√ßada (mata os processos sem esperar nada)

pg_ctl -D "C:\Program Files\PostgreSQL\17\data" stop -m immediate

üö® Desliga imediatamente, sem esperar conex√µes finalizarem.
üö® Pode exigir recupera√ß√£o na pr√≥xima inicializa√ß√£o. 
(Use s√≥ em emerg√™ncias, POIS PODE TER ATE PERDA DE DADOS OU 
SEU SERVICO NAO SUBIR A DEPENDER DO QUE ESTAVA RODANDO!)

RESULTADO:
C:\Program Files\PostgreSQL\17\bin>pg_ctl -D "C:\Program Files\PostgreSQL\17\data" stop
waiting for server to shut down.... done
server stopped

SE APAREU ALGUMA TELA DO FIREWALL PEDINDO PERMISSAO A SER DADO PARA 
O SERVICO POSTGRESQL SER INICIADO, PODE PERMITIR.

VEJA SE O SERVICE DO POSTGRESQL EM SERVICES FOI PARADO.
PODE VER VIA COMANDO OU NO SERVICES

pg_ctl -D "C:\Program Files\PostgreSQL\17\data" status

SE VOCE FOR EM SERVICES VAI CONSEGUIR DAR START NOVAMENTE NO SERVICO, OU
RODE O COMANDO ABAIXO COMO ADMINISTRATOR NO DOS:

net start postgresql-x64-17

PARA VER O STATUS DE UM SERVICO:

sc query postgresql-x64-17


----------------------------------------------------------------------------------------------------------
FIM










